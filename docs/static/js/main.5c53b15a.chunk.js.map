{"version":3,"sources":["Configure.tsx","DateUpdater.tsx","Home.tsx","index.tsx"],"names":["Dates","DateOptions","Object","keys","map","date","Configure","state","adjust","configured","datepart","no_params","num","parameter","parameters","onDatePartChangeWrapper","parameterName","e","_this","find","p","name","selectedDate","target","value","setState","adjustChange","checked","populateParams","settings","window","tableau","extensions","getAll","dashboardContent","dashboard","getParametersAsync","then","dashboardParameters","prop","configuredParameters","JSON","parse","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_loop","dashboardParameter","configuredParameter","allowableValues","type","dataType","None","push","_iterator","Symbol","iterator","next","done","err","return","sort","a","b","length","submit","set","stringify","saveAsync","ui","closeDialog","_this2","this","initializeDialogAsync","_this3","react","className","style","display","key","concat","tableau_ui_min","kind","onChange","onSelect","option","width","onClick","React","DateUpdater","mode","configure","popupUrl","location","origin","process","displayDialogAsync","height","updateParameters","catch","error","errorCode","ErrorCodes","DialogClosedByUser","console","log","message","environment","update","Today","Yesterday","SevenDaysAgo","ThirtyDaysAgo","dates","forEach","Date","setDate","getDate","SixtyDaysAgo","NinetyDaysAgo","SixMonthsAgo","setMonth","getMonth","OneYearAgo","setHours","getHours","getTimezoneOffset","changeValueAsync","initializeAsync","title","aria-labelledby","data-prefix","data-icon","role","xmlns","viewBox","data-fa-i2svg","fill","d","Home","rel","media","href","PrimaryLayout","react_router","path","exact","component","App","react_router_dom","src_PrimaryLayout","ReactDOM","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.5c53b15a.chunk.js","sourcesContent":["import * as React from 'react';\r\n\r\nimport { Button, Checkbox, DropdownSelect } from '@tableau/tableau-ui';\r\n\r\ndeclare global {\r\n    interface Window { tableau: any; }\r\n}\r\n\r\nexport enum Dates {\r\n    None = 'None',\r\n    Today = 'Today',\r\n    Yesterday = 'Yesterday',\r\n    SevenDaysAgo = '7 Days ago',\r\n    ThirtyDaysAgo = '30 Days ago',\r\n    SixtyDaysAgo = '60 Days ago',\r\n    NinetyDaysAgo = '90 Days ago',\r\n    SixMonthsAgo = '6 Months ago',\r\n    OneYearAgo = '1 Year ago',\r\n}\r\n\r\nconst DateOptions: string[] = Object.keys(Dates).map((date: any) => Dates[date]);\r\n\r\ninterface Parameter {\r\n    name: string;\r\n    selectedDate: string;\r\n}\r\n\r\ninterface State {\r\n    adjust: boolean,\r\n    configured: boolean;\r\n    datepart: string;\r\n    no_params: boolean;\r\n    num: number;\r\n    parameter: string;\r\n    parameters: Parameter[];\r\n}\r\n\r\nfunction sortBy(prop: string) {\r\n    return (a: any, b: any) => {\r\n        if (a[prop] > b[prop]) {\r\n            return 1;\r\n        } else if (a[prop] < b[prop]) {\r\n            return -1;\r\n        }\r\n        return 0;\r\n    }\r\n}\r\n\r\n// Container for all configurations\r\nclass Configure extends React.Component<any, any> {\r\n    public readonly state: State = {\r\n        adjust: false,\r\n        configured: false,\r\n        datepart: 'days',\r\n        no_params: false,\r\n        num: 0,\r\n        parameter: '',\r\n        parameters: [],\r\n    };\r\n\r\n    // Updates parameter dropdowns\r\n    public onDatePartChangeWrapper = (parameterName: string): ((e: React.ChangeEvent<HTMLSelectElement>) => void) => {\r\n        return (e: React.ChangeEvent<HTMLSelectElement>): void => {\r\n            const parameters = this.state.parameters;\r\n            const parameter = parameters.find((p: Parameter) => p.name === parameterName);\r\n            if (parameter) {\r\n                parameter.selectedDate = e.target.value;\r\n                this.setState({ parameters });\r\n            }\r\n        }\r\n    }\r\n    \r\n    // Handles change in adjust for time zone checkbox\r\n    public adjustChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n        this.setState({ adjust: e.target.checked });\r\n    };\r\n\r\n    // Gets list of all open input date parameters\r\n    public populateParams = (): void => {\r\n        const settings = window.tableau.extensions.settings.getAll();\r\n        window.tableau.extensions.dashboardContent.dashboard.getParametersAsync().then((dashboardParameters: any) => {\r\n            const parameters: Parameter[] = [];\r\n            const configuredParameters = (settings.parameters) ? JSON.parse(settings.parameters) : [];\r\n            for (const dashboardParameter of dashboardParameters) {\r\n                let configuredParameter: any;\r\n                if (settings.configured === 'true') {\r\n                    configuredParameter = configuredParameters.find((parameter: any) => parameter.name === dashboardParameter.name);\r\n                }\r\n                if (dashboardParameter.allowableValues.type === 'all' && (dashboardParameter.dataType === 'date' || dashboardParameter.dataType === 'date-time')) {\r\n                    const selectedDate: string = configuredParameter ? configuredParameter.selectedDate : Dates.None;\r\n                    parameters.push({\r\n                        name: dashboardParameter.name,\r\n                        selectedDate,\r\n                    });\r\n                }\r\n            }\r\n\r\n            parameters.sort(sortBy('name'));\r\n\r\n            this.setState({\r\n                no_params: Object.keys(parameters).length === 0,\r\n                parameters,\r\n            });\r\n        });\r\n    }\r\n\r\n    // Saves settings and closes configure dialog with parameter payload\r\n    public submit = (): void => {\r\n        window.tableau.extensions.settings.set('configured', 'true');\r\n        window.tableau.extensions.settings.set('parameters', JSON.stringify(this.state.parameters));\r\n        window.tableau.extensions.settings.set('adjust', this.state.adjust);\r\n        window.tableau.extensions.settings.saveAsync().then(() => {\r\n            window.tableau.extensions.ui.closeDialog(this.state.parameter);\r\n        });\r\n    }\r\n\r\n    // Once we have mounted, we call to initialize\r\n    public componentWillMount() {\r\n        window.tableau.extensions.initializeDialogAsync().then(() => {\r\n            const settings = window.tableau.extensions.settings.getAll();\r\n            if (settings.configured === 'true') {\r\n                this.setState({\r\n                    adjust: settings.adjust === 'true' || false,\r\n                });\r\n            }\r\n            this.populateParams();\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div className='container'>\r\n                <div className='header'>\r\n                    Date Updater Configuration\r\n                </div>\r\n                <div>\r\n                    <p className='text'>Choose the date for the parameters you want to automatically update.</p>\r\n                    <div className='scrolly'>\r\n                    <p className='error' style={{display: (this.state.no_params === true) ? 'inline' : 'none'}}>No open input date parameters found.</p>\r\n                        {this.state.parameters.map((p: Parameter) => (\r\n                            <div className='dateset' key={`dataset-${p.name}`}>\r\n                                <div className='pleft'>\r\n                                    {p.name}\r\n                                </div>\r\n                                <div className='pright'>\r\n                                <DropdownSelect className='dropdown-select' kind='line' onChange={this.onDatePartChangeWrapper(p.name)} onSelect={this.onDatePartChangeWrapper(p.name)} value={p.selectedDate}>\r\n                                    {DateOptions.map((option: string) => <option key={option}>{option}</option>)}\r\n                                </DropdownSelect>\r\n                                </div>\r\n                            </div>\r\n                        ) )}\r\n                    </div>\r\n                </div>\r\n                <div className='footer'>\r\n                    <div className='btncluster'>\r\n                    <Checkbox checked={this.state.adjust} onChange={this.adjustChange} style={{ width: '200px' }}>Adjust for timezone.</Checkbox>\r\n                        <Button kind='filledGreen' onClick={this.submit}>OK</Button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Configure;","import * as React from 'react';\r\nimport { Dates } from './Configure';\r\nimport './style.css';\r\n\r\n/* tslint:disable:no-console */\r\n\r\ndeclare global {\r\n    interface Window { tableau: any; }\r\n}\r\n\r\ninterface State {\r\n    mode: string,\r\n}\r\n\r\nclass DateUpdater extends React.Component<any, State> {\r\n    public readonly state: State = {\r\n        mode: 'authoring',\r\n    };\r\n\r\n    public updateParameters(parameters: any) {\r\n        const settings = window.tableau.extensions.settings.getAll();\r\n        parameters = JSON.parse(parameters);\r\n\r\n        // Start backwards compatibility conversion //\r\n        if (window.tableau.extensions.environment.mode === \"authoring\") {\r\n            for (const parameter of parameters) {\r\n                if (parameter.selectedDate) {\r\n                    break;\r\n                } else {\r\n                    if (parameter.update) {\r\n                        switch (parameter.update) {\r\n                            case 'today':\r\n                                parameter.selectedDate = Dates.Today;\r\n                                break;\r\n                            case 'yesterday':\r\n                                parameter.selectedDate = Dates.Yesterday;\r\n                                break;\r\n                            case 'week':\r\n                                parameter.selectedDate = Dates.SevenDaysAgo;\r\n                                break;\r\n                            case 'month':\r\n                                parameter.selectedDate = Dates.ThirtyDaysAgo;\r\n                                break;\r\n                            default:\r\n                                parameter.selectedDate = Dates.None;\r\n                        }\r\n                        delete parameter.update\r\n                        delete parameter.dates\r\n                    }\r\n                }\r\n            }\r\n            window.tableau.extensions.settings.set('parameters', JSON.stringify(parameters));\r\n            window.tableau.extensions.settings.saveAsync();\r\n        }\r\n        // End backwards compatibility conversion //\r\n\r\n        window.tableau.extensions.dashboardContent.dashboard.getParametersAsync().then((dashboardParameters: any) => {\r\n            dashboardParameters.forEach((dashboardParameter: any) => {\r\n                if (dashboardParameter.allowableValues.type === 'all' && (dashboardParameter.dataType === 'date' || dashboardParameter.dataType === 'date-time')) {\r\n                    const parameter = parameters.find((p: any) => p.name === dashboardParameter.name);\r\n                    if (parameter) {\r\n                        const date = new Date();\r\n                        switch (parameter.selectedDate) {\r\n                            case Dates.Yesterday:\r\n                                date.setDate(date.getDate() - 1);\r\n                                break;\r\n                            case Dates.SevenDaysAgo:\r\n                                date.setDate(date.getDate() - 7);\r\n                                break;\r\n                            case Dates.ThirtyDaysAgo:\r\n                                date.setDate(date.getDate() - 30);\r\n                                break;\r\n                            case Dates.SixtyDaysAgo:\r\n                                date.setDate(date.getDate() - 60);\r\n                                break;\r\n                            case Dates.NinetyDaysAgo:\r\n                                date.setDate(date.getDate() - 90);\r\n                                break;\r\n                            case Dates.SixMonthsAgo:\r\n                                date.setMonth(date.getMonth() - 6);\r\n                                break;\r\n                            case Dates.OneYearAgo:\r\n                                date.setMonth(date.getMonth() - 12);\r\n                                break;\r\n                        }\r\n                        if (parameter.selectedDate !== Dates.None) {\r\n                            if (settings.adjust === 'true') {\r\n                                date.setHours(date.getHours() - date.getTimezoneOffset() / 60);\r\n                            }\r\n                            dashboardParameter.changeValueAsync(date);\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    // Pops open the configure dialog\r\n    public configure = (): void => {\r\n        const popupUrl = `${window.location.origin}${process.env.PUBLIC_URL}/#/config`;\r\n        const payload = '';\r\n        window.tableau.extensions.ui.displayDialogAsync(popupUrl, payload, { height: 250, width: 375 }).then(() => {\r\n            const settings = window.tableau.extensions.settings.getAll();\r\n            this.updateParameters(settings.parameters);\r\n        }).catch((error: any) => {\r\n            switch (error.errorCode) {\r\n                case window.tableau.ErrorCodes.DialogClosedByUser:\r\n                    console.log('Dialog was closed by user.');\r\n                    break;\r\n                default:\r\n                    console.error(error.message);\r\n            }\r\n        });\r\n    }\r\n\r\n    // Prior to mounting we initialize\r\n    public componentWillMount() {\r\n        window.tableau.extensions.initializeAsync({ configure: this.configure }).then(() => {\r\n            this.setState({\r\n                mode: window.tableau.extensions.environment.mode,\r\n            });\r\n            const settings = window.tableau.extensions.settings.getAll();\r\n            if (settings.configured !== 'true') {\r\n                this.configure();\r\n            } else {\r\n                this.updateParameters(settings.parameters);\r\n            }\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div className={'cog ' + this.state.mode} title='This cog will not show in viewer mode.'>\r\n                <svg className='svg-inline--fa fa-cog fa-w-16 fa-2x click' onClick={this.configure} aria-labelledby='svg-inline--fa-title-1' data-prefix='fas' data-icon='cog' role='img' xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512' data-fa-i2svg='true'>\r\n                    <path fill='currentColor' d='M444.788 291.1l42.616 24.599c4.867 2.809 7.126 8.618 5.459 13.985-11.07 35.642-29.97 67.842-54.689 94.586a12.016 12.016 0 0 1-14.832 2.254l-42.584-24.595a191.577 191.577 0 0 1-60.759 35.13v49.182a12.01 12.01 0 0 1-9.377 11.718c-34.956 7.85-72.499 8.256-109.219.007-5.49-1.233-9.403-6.096-9.403-11.723v-49.184a191.555 191.555 0 0 1-60.759-35.13l-42.584 24.595a12.016 12.016 0 0 1-14.832-2.254c-24.718-26.744-43.619-58.944-54.689-94.586-1.667-5.366.592-11.175 5.459-13.985L67.212 291.1a193.48 193.48 0 0 1 0-70.199l-42.616-24.599c-4.867-2.809-7.126-8.618-5.459-13.985 11.07-35.642 29.97-67.842 54.689-94.586a12.016 12.016 0 0 1 14.832-2.254l42.584 24.595a191.577 191.577 0 0 1 60.759-35.13V25.759a12.01 12.01 0 0 1 9.377-11.718c34.956-7.85 72.499-8.256 109.219-.007 5.49 1.233 9.403 6.096 9.403 11.723v49.184a191.555 191.555 0 0 1 60.759 35.13l42.584-24.595a12.016 12.016 0 0 1 14.832 2.254c24.718 26.744 43.619 58.944 54.689 94.586 1.667 5.366-.592 11.175-5.459 13.985L444.788 220.9a193.485 193.485 0 0 1 0 70.2zM336 256c0-44.112-35.888-80-80-80s-80 35.888-80 80 35.888 80 80 80 80-35.888 80-80z' />\r\n                </svg>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DateUpdater;\r\n","import * as React from 'react';\nimport './home.css';\n\nclass Home extends React.Component<any, any> {\n\tpublic render() {\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t<link rel='stylesheet' type='text/css' media='screen' href='home.css' />\n\t\t\t\t<div className='icontainer'>\n\t\t\t\t\t<div className='box'>\n\t\t\t\t\t\t<div className='left'>\n\t\t\t\t\t\t\t<h1 className='iheader'>Date Updater</h1>\n\t\t\t\t\t\t\t<span className='tagline'>Automatically update your date parameters to today's date.</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='right'>\n\t\t\t\t\t\t\t<h4 className='big'>What is it?</h4>\n\t\t\t\t\t\t\t<p>With this extension, no longer will you need to employ crazy hacks or manually update your date parameters. This extension allows you to refresh any date parameter to today's date whenever a workbook is opened.</p>\n\t\t\t\t\t\t\t<h4 className='big'>Using the Extension</h4>\n\t\t\t\t\t\t\t<ol>\n\t\t\t\t\t\t\t\t<li>Bring in the extension</li>\n\t\t\t\t\t\t\t\t<li>In the configuration window, choose the date parameter to update</li>\n\t\t\t\t\t\t\t\t<li>Click OK</li>\n\t\t\t\t\t\t\t</ol>\n\t\t\t\t\t\t\t<p><b>Note:</b> You can add as many instances of this extension as you like!</p>\n\t\t\t\t\t\t\t<div className='gh'>\n\t\t\t\t\t\t\tGet this extension and more in the <a href='https://extensiongallery.tableau.com/'>Extension Gallery</a>.\n\t\t\t\t\t\t\t\t{/* <a href='https://github.com/tableau/extension-date-updater'>View on GitHub</a> */}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</React.Fragment>\n\t\t);\n\t}\n}\n\nexport default Home;","import 'react-app-polyfill/ie11';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { HashRouter, Route } from 'react-router-dom';\nimport Configure from './Configure';\nimport DateUpdater from './DateUpdater';\nimport Home from './Home';\n\nconst PrimaryLayout = () => (\n  <React.Fragment>\n      <Route path='/' exact={true} component={Home} />\n      <Route path='/dateupdate' component={DateUpdater} />\n      <Route path='/config' component={Configure} />\n  </React.Fragment>\n)\n\nclass App extends React.Component {\n  public render() {\n      return (\n          <HashRouter>\n              <PrimaryLayout />\n          </HashRouter>\n      )\n  }\n}\n\nReactDOM.render(<App />, document.getElementById('container'));\n"],"sourceRoot":""}